import requests
import telegram
from flask import Flask, request
import threading
import time
import json

TOKEN = "YOUR_MAIN_BOT_TOKEN"
DATABASE_BOT_URL = "http://your-database-bot-url/botYOUR_DATABASE_BOT_TOKEN"
ADMIN_ID = "YOUR_TELEGRAM_ID"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = telegram.Bot(token=TOKEN)
app = Flask(__name__)

users_file = "users.json"
confirmed_purchases = "confirmed.json"

def load_users():
    try:
        with open(users_file, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_users(users):
    with open(users_file, "w", encoding="utf-8") as file:
        json.dump(users, file, ensure_ascii=False, indent=4)

def load_confirmed():
    try:
        with open(confirmed_purchases, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_confirmed(data):
    with open(confirmed_purchases, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def send_daily_message():
    while True:
        time.sleep(86400)  # –ñ–¥—ë–º 24 —á–∞—Å–∞
        users = load_users()
        response = requests.post(DATABASE_BOT_URL, json={"message": {"chat": {"id": users[0]}, "text": "/get daily_word"}})
        daily_word = response.text
        for user in users:
            bot.send_message(chat_id=user, text=f"üìñ –°–ª–æ–≤–æ –¥–Ω—è: {daily_word}")

daily_thread = threading.Thread(target=send_daily_message)
daily_thread.start()

@app.route(f"/bot{TOKEN}", methods=["POST"])
def receive_update():
    update = request.get_json()
    if "message" in update:
        chat_id = update["message"]["chat"]["id"]
        text = update["message"].get("text", "")
        
        users = load_users()
        if chat_id not in users:
            users.append(chat_id)
            save_users(users)
        
        if text == "/start":
            keyboard = telegram.ReplyKeyboardMarkup([
                ["üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "üõí –ö—É–ø–∏—Ç—å"],
                ["üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"]
            ], resize_keyboard=True)
            bot.send_message(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Grammar & Chill!", reply_markup=keyboard)
            
        elif text == "üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
            response = requests.post(DATABASE_BOT_URL, json={"message": {"chat": {"id": chat_id}, "text": "/get free_materials"}})
            bot.send_message(chat_id=chat_id, text=response.text)
            
        elif text == "üõí –ö—É–ø–∏—Ç—å":
            bot.send_message(chat_id=chat_id, text="–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ Kaspi –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
            
        elif text == "üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã":
            response = requests.post(DATABASE_BOT_URL, json={"message": {"chat": {"id": chat_id}, "text": "/get resources"}})
            bot.send_message(chat_id=chat_id, text=response.text)
            
        elif text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é":
            bot.send_message(chat_id=chat_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∏–¥–µ—é, –∏ –º—ã –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º!")
        
        elif text.startswith("/confirm") and str(chat_id) == ADMIN_ID:  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            parts = text.split()
            if len(parts) == 2:
                user_id = parts[1]
                confirmed = load_confirmed()
                confirmed[user_id] = True
                save_confirmed(confirmed)
                bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª:")
                bot.send_document(chat_id=user_id, document=open("paid_material.pdf", "rb"))  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª
                bot.send_message(chat_id=chat_id, text=f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            else:
                bot.send_message(chat_id=chat_id, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm USER_ID")
        
        elif text.startswith("/add_material") and str(chat_id) == ADMIN_ID:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            parts = text.split(" ", 2)
            if len(parts) == 3:
                category, content = parts[1], parts[2]
                response = requests.post(DATABASE_BOT_URL, json={"message": {"chat": {"id": chat_id}, "text": f"/add {category} {content}"}})
                bot.send_message(chat_id=chat_id, text=response.text)
            else:
                bot.send_message(chat_id=chat_id, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_material category content")
    
    elif "photo" in update["message"]:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞
        chat_id = update["message"]["chat"]["id"]
        photo = update["message"]["photo"][-1]["file_id"]  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –∫—Ä—É–ø–Ω–æ–µ —Ñ–æ—Ç–æ
        caption = f"üìå –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}"
        bot.send_photo(chat_id=ADMIN_ID, photo=photo, caption=caption)
        bot.send_message(chat_id=chat_id, text="–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    
    return "OK"

import os

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5001)))

